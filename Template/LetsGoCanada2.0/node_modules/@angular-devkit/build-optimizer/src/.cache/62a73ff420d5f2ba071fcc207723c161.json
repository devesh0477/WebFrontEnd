{"remainingRequest":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/ngx-bootstrap/accordion/fesm5/ngx-bootstrap-accordion.js","dependencies":[{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/ngx-bootstrap/accordion/fesm5/ngx-bootstrap-accordion.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,ngx_bootstrap_utils,_angular_common,ngx_bootstrap_collapse PURE_IMPORTS_END */\nimport { Injectable, Component, Input, Inject, Output, HostBinding, EventEmitter, NgModule } from '@angular/core';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { CommonModule } from '@angular/common';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Configuration service, provides default values for the AccordionComponent.\n */\nvar AccordionConfig = /** @class */ /*@__PURE__*/ (function () {\n    function AccordionConfig() {\n        /**\n         * Whether the other panels should be closed when a panel is opened\n         */\n        this.closeOthers = false;\n        /**\n         * turn on/off animation\n         */\n        this.isAnimated = false;\n    }\n    return AccordionConfig;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Displays collapsible content panels for presenting information in a limited amount of space.\n */\nvar AccordionComponent = /** @class */ /*@__PURE__*/ (function () {\n    function AccordionComponent(config) {\n        /**\n         * turn on/off animation\n         */\n        this.isAnimated = false;\n        this.groups = [];\n        Object.assign(this, config);\n    }\n    /**\n     * @param {?} openGroup\n     * @return {?}\n     */\n    AccordionComponent.prototype.closeOtherPanels = /**\n     * @param {?} openGroup\n     * @return {?}\n     */\n        function (openGroup) {\n            if (!this.closeOthers) {\n                return;\n            }\n            this.groups.forEach(( /**\n             * @param {?} group\n             * @return {?}\n             */function (group) {\n                if (group !== openGroup) {\n                    group.isOpen = false;\n                }\n            }));\n        };\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n    AccordionComponent.prototype.addGroup = /**\n     * @param {?} group\n     * @return {?}\n     */\n        function (group) {\n            group.isAnimated = this.isAnimated;\n            this.groups.push(group);\n        };\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n    AccordionComponent.prototype.removeGroup = /**\n     * @param {?} group\n     * @return {?}\n     */\n        function (group) {\n            /** @type {?} */\n            var index = this.groups.indexOf(group);\n            if (index !== -1) {\n                this.groups.splice(index, 1);\n            }\n        };\n    return AccordionComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\nvar AccordionPanelComponent = /** @class */ /*@__PURE__*/ (function () {\n    function AccordionPanelComponent(accordion) {\n        /**\n         * turn on/off animation\n         */\n        this.isAnimated = false;\n        /**\n         * Emits when the opened state changes\n         */\n        this.isOpenChange = new EventEmitter();\n        this._isOpen = false;\n        this.accordion = accordion;\n    }\n    Object.defineProperty(AccordionPanelComponent.prototype, \"isOpen\", {\n        // Questionable, maybe .panel-open should be on child div.panel element?\n        /** Is accordion group open or closed. This property supports two-way binding */\n        get: \n        // Questionable, maybe .panel-open should be on child div.panel element?\n        /**\n         * Is accordion group open or closed. This property supports two-way binding\n         * @return {?}\n         */\n        function () {\n            return this._isOpen;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            var _this = this;\n            if (value !== this.isOpen) {\n                if (value) {\n                    this.accordion.closeOtherPanels(this);\n                }\n                this._isOpen = value;\n                Promise.resolve(null).then(( /**\n                 * @return {?}\n                 */function () {\n                    _this.isOpenChange.emit(value);\n                }))\n                    .catch(( /**\n             * @param {?} error\n             * @return {?}\n             */function (error) {\n                    /* tslint:disable: no-console */\n                    console.log(error);\n                }));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AccordionPanelComponent.prototype, \"isBs3\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return isBs3();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    AccordionPanelComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.panelClass = this.panelClass || 'panel-default';\n            this.accordion.addGroup(this);\n        };\n    /**\n     * @return {?}\n     */\n    AccordionPanelComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.accordion.removeGroup(this);\n        };\n    /**\n     * @return {?}\n     */\n    AccordionPanelComponent.prototype.toggleOpen = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.isDisabled) {\n                this.isOpen = !this.isOpen;\n            }\n        };\n    return AccordionPanelComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar AccordionModule = /** @class */ /*@__PURE__*/ (function () {\n    function AccordionModule() {\n    }\n    /**\n     * @return {?}\n     */\n    AccordionModule.forRoot = /**\n     * @return {?}\n     */\n        function () {\n            return { ngModule: AccordionModule, providers: [AccordionConfig] };\n        };\n    return AccordionModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { AccordionComponent, AccordionConfig, AccordionModule, AccordionPanelComponent };\n//# sourceMappingURL=ngx-bootstrap-accordion.js.map\n",null]}