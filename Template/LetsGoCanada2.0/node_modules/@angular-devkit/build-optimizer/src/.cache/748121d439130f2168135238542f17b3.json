{"remainingRequest":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/ngx-bootstrap/alert/fesm5/ngx-bootstrap-alert.js","dependencies":[{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/ngx-bootstrap/alert/fesm5/ngx-bootstrap-alert.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,_angular_core,ngx_bootstrap_utils,_angular_common PURE_IMPORTS_END */\nimport { __decorate, __metadata } from 'tslib';\nimport { Injectable, Component, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, EventEmitter, NgModule } from '@angular/core';\nimport { OnChange } from 'ngx-bootstrap/utils';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar AlertConfig = /** @class */ /*@__PURE__*/ (function () {\n    function AlertConfig() {\n        /**\n         * default alert type\n         */\n        this.type = 'warning';\n        /**\n         * is alerts are dismissible by default\n         */\n        this.dismissible = false;\n        /**\n         * default time before alert will dismiss\n         */\n        this.dismissOnTimeout = undefined;\n    }\n    return AlertConfig;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar AlertComponent = /** @class */ /*@__PURE__*/ (function () {\n    function AlertComponent(_config, changeDetection) {\n        var _this = this;\n        this.changeDetection = changeDetection;\n        /**\n         * Alert type.\n         * Provides one of four bootstrap supported contextual classes:\n         * `success`, `info`, `warning` and `danger`\n         */\n        this.type = 'warning';\n        /**\n         * If set, displays an inline \"Close\" button\n         */\n        this.dismissible = false;\n        /**\n         * Is alert visible\n         */\n        this.isOpen = true;\n        /**\n         * This event fires immediately after close instance method is called,\n         * $event is an instance of Alert component.\n         */\n        this.onClose = new EventEmitter();\n        /**\n         * This event fires when alert closed, $event is an instance of Alert component\n         */\n        this.onClosed = new EventEmitter();\n        this.classes = '';\n        this.dismissibleChange = new EventEmitter();\n        Object.assign(this, _config);\n        this.dismissibleChange.subscribe(( /**\n         * @param {?} dismissible\n         * @return {?}\n         */function (dismissible) {\n            _this.classes = _this.dismissible ? 'alert-dismissible' : '';\n            _this.changeDetection.markForCheck();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    AlertComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.dismissOnTimeout) {\n                // if dismissOnTimeout used as attr without binding, it will be a string\n                setTimeout(( /**\n                 * @return {?}\n                 */function () { return _this.close(); }), parseInt(( /** @type {?} */(this.dismissOnTimeout)), 10));\n            }\n        };\n    // todo: animation ` If the .fade and .in classes are present on the element,\n    // the alert will fade out before it is removed`\n    /**\n     * Closes an alert by removing it from the DOM.\n     */\n    // todo: animation ` If the .fade and .in classes are present on the element,\n    // the alert will fade out before it is removed`\n    /**\n     * Closes an alert by removing it from the DOM.\n     * @return {?}\n     */\n    AlertComponent.prototype.close =\n        // todo: animation ` If the .fade and .in classes are present on the element,\n        // the alert will fade out before it is removed`\n        /**\n         * Closes an alert by removing it from the DOM.\n         * @return {?}\n         */\n        function () {\n            if (!this.isOpen) {\n                return;\n            }\n            this.onClose.emit(this);\n            this.isOpen = false;\n            this.changeDetection.markForCheck();\n            this.onClosed.emit(this);\n        };\n    __decorate([\n        OnChange(),\n        __metadata(\"design:type\", Object)\n    ], AlertComponent.prototype, \"dismissible\", void 0);\n    return AlertComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar AlertModule = /** @class */ /*@__PURE__*/ (function () {\n    function AlertModule() {\n    }\n    /**\n     * @return {?}\n     */\n    AlertModule.forRoot = /**\n     * @return {?}\n     */\n        function () {\n            return { ngModule: AlertModule, providers: [AlertConfig] };\n        };\n    return AlertModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { AlertComponent, AlertConfig, AlertModule };\n//# sourceMappingURL=ngx-bootstrap-alert.js.map\n",null]}