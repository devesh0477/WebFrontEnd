{"remainingRequest":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/ngx-bootstrap/collapse/fesm5/ngx-bootstrap-collapse.js","dependencies":[{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/ngx-bootstrap/collapse/fesm5/ngx-bootstrap-collapse.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_animations,_angular_core PURE_IMPORTS_END */\nimport { style, animate, AnimationBuilder } from '@angular/animations';\nimport { Directive, ElementRef, Renderer2, Output, HostBinding, Input, EventEmitter, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar COLLAPSE_ANIMATION_TIMING = '400ms cubic-bezier(0.4,0.0,0.2,1)';\n/** @type {?} */\nvar expandAnimation = [\n    /*@__PURE__*/ style({ height: 0, visibility: 'hidden' }),\n    /*@__PURE__*/ animate(COLLAPSE_ANIMATION_TIMING, /*@__PURE__*/ style({ height: '*', visibility: 'visible' }))\n];\n/** @type {?} */\nvar collapseAnimation = [\n    /*@__PURE__*/ style({ height: '*', visibility: 'visible' }),\n    /*@__PURE__*/ animate(COLLAPSE_ANIMATION_TIMING, /*@__PURE__*/ style({ height: 0, visibility: 'hidden' }))\n];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar CollapseDirective = /** @class */ /*@__PURE__*/ (function () {\n    function CollapseDirective(_el, _renderer, _builder) {\n        this._el = _el;\n        this._renderer = _renderer;\n        /**\n         * This event fires as soon as content collapses\n         */\n        this.collapsed = new EventEmitter();\n        /**\n         * This event fires when collapsing is started\n         */\n        this.collapses = new EventEmitter();\n        /**\n         * This event fires as soon as content becomes visible\n         */\n        this.expanded = new EventEmitter();\n        /**\n         * This event fires when expansion is started\n         */\n        this.expands = new EventEmitter();\n        // shown\n        this.isExpanded = true;\n        // hidden\n        this.isCollapsed = false;\n        // stale state\n        this.isCollapse = true;\n        // animation state\n        this.isCollapsing = false;\n        /**\n         * turn on/off animation\n         */\n        this.isAnimated = false;\n        this._display = 'block';\n        this._stylesLoaded = false;\n        this._COLLAPSE_ACTION_NAME = 'collapse';\n        this._EXPAND_ACTION_NAME = 'expand';\n        this._factoryCollapseAnimation = _builder.build(collapseAnimation);\n        this._factoryExpandAnimation = _builder.build(expandAnimation);\n    }\n    Object.defineProperty(CollapseDirective.prototype, \"display\", {\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (!this.isAnimated) {\n                this._renderer.setStyle(this._el.nativeElement, 'display', value);\n                return;\n            }\n            this._display = value;\n            if (value === 'none') {\n                this.hide();\n                return;\n            }\n            this.show();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CollapseDirective.prototype, \"collapse\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.isExpanded;\n        },\n        /** A flag indicating visibility of content (shown or hidden) */\n        set: /**\n         * A flag indicating visibility of content (shown or hidden)\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (!this._player || this._isAnimationDone) {\n                this.isExpanded = value;\n                this.toggle();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CollapseDirective.prototype.ngAfterViewChecked = /**\n     * @return {?}\n     */\n        function () {\n            this._stylesLoaded = true;\n            if (!this._player || !this._isAnimationDone) {\n                return;\n            }\n            this._player.reset();\n            this._renderer.setStyle(this._el.nativeElement, 'height', '*');\n        };\n    /** allows to manually toggle content visibility */\n    /**\n     * allows to manually toggle content visibility\n     * @return {?}\n     */\n    CollapseDirective.prototype.toggle = /**\n     * allows to manually toggle content visibility\n     * @return {?}\n     */\n        function () {\n            if (this.isExpanded) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        };\n    /** allows to manually hide content */\n    /**\n     * allows to manually hide content\n     * @return {?}\n     */\n    CollapseDirective.prototype.hide = /**\n     * allows to manually hide content\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.isCollapsing = true;\n            this.isExpanded = false;\n            this.isCollapsed = true;\n            this.isCollapsing = false;\n            this.collapses.emit(this);\n            this._isAnimationDone = false;\n            this.animationRun(this.isAnimated, this._COLLAPSE_ACTION_NAME)(( /**\n             * @return {?}\n             */function () {\n                _this._isAnimationDone = true;\n                _this.collapsed.emit(_this);\n                _this._renderer.setStyle(_this._el.nativeElement, 'display', 'none');\n            }));\n        };\n    /** allows to manually show collapsed content */\n    /**\n     * allows to manually show collapsed content\n     * @return {?}\n     */\n    CollapseDirective.prototype.show = /**\n     * allows to manually show collapsed content\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._renderer.setStyle(this._el.nativeElement, 'display', this._display);\n            this.isCollapsing = true;\n            this.isExpanded = true;\n            this.isCollapsed = false;\n            this.isCollapsing = false;\n            this.expands.emit(this);\n            this._isAnimationDone = false;\n            this.animationRun(this.isAnimated, this._EXPAND_ACTION_NAME)(( /**\n             * @return {?}\n             */function () {\n                _this._isAnimationDone = true;\n                _this.expanded.emit(_this);\n            }));\n        };\n    /**\n     * @param {?} isAnimated\n     * @param {?} action\n     * @return {?}\n     */\n    CollapseDirective.prototype.animationRun = /**\n     * @param {?} isAnimated\n     * @param {?} action\n     * @return {?}\n     */\n        function (isAnimated, action) {\n            var _this = this;\n            if (!isAnimated || !this._stylesLoaded) {\n                return ( /**\n                 * @param {?} callback\n                 * @return {?}\n                 */function (callback) { return callback(); });\n            }\n            this._renderer.setStyle(this._el.nativeElement, 'overflow', 'hidden');\n            this._renderer.addClass(this._el.nativeElement, 'collapse');\n            /** @type {?} */\n            var factoryAnimation = (action === this._EXPAND_ACTION_NAME)\n                ? this._factoryExpandAnimation\n                : this._factoryCollapseAnimation;\n            if (this._player) {\n                this._player.destroy();\n            }\n            this._player = factoryAnimation.create(this._el.nativeElement);\n            this._player.play();\n            return ( /**\n             * @param {?} callback\n             * @return {?}\n             */function (callback) { return _this._player.onDone(callback); });\n        };\n    return CollapseDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar CollapseModule = /** @class */ /*@__PURE__*/ (function () {\n    function CollapseModule() {\n    }\n    /**\n     * @return {?}\n     */\n    CollapseModule.forRoot = /**\n     * @return {?}\n     */\n        function () {\n            return { ngModule: CollapseModule, providers: [] };\n        };\n    return CollapseModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { CollapseDirective, CollapseModule };\n//# sourceMappingURL=ngx-bootstrap-collapse.js.map\n",null]}