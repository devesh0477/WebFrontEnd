{"remainingRequest":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/ngx-editor/fesm5/ngx-editor.js","dependencies":[{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/ngx-editor/fesm5/ngx-editor.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,_angular_common_http,rxjs,_angular_forms,ngx_bootstrap,_angular_common PURE_IMPORTS_END */\nimport { Injectable, Component, Input, Output, ViewChild, EventEmitter, Renderer2, forwardRef, HostListener, NgModule } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormBuilder, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { PopoverConfig, PopoverModule } from 'ngx-bootstrap';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * enable or disable toolbar based on configuration\n *\n * @param {?} value toolbar item\n * @param {?} toolbar toolbar configuration object\n * @return {?}\n */\nfunction canEnableToolbarOptions(value, toolbar) {\n    if (value) {\n        if (toolbar['length'] === 0) {\n            return true;\n        }\n        else {\n            /** @type {?} */\n            var found = toolbar.filter(function (array) {\n                return array.indexOf(value) !== -1;\n            });\n            return found.length ? true : false;\n        }\n    }\n    else {\n        return false;\n    }\n}\n/**\n * set editor configuration\n *\n * @param {?} value configuration via [config] property\n * @param {?} ngxEditorConfig default editor configuration\n * @param {?} input direct configuration inputs via directives\n * @return {?}\n */\nfunction getEditorConfiguration(value, ngxEditorConfig, input) {\n    for (var i in ngxEditorConfig) {\n        if (i) {\n            if (input[i] !== undefined) {\n                value[i] = input[i];\n            }\n            if (!value.hasOwnProperty(i)) {\n                value[i] = ngxEditorConfig[i];\n            }\n        }\n    }\n    return value;\n}\n/**\n * return vertical if the element is the resizer property is set to basic\n *\n * @param {?} resizer type of resizer, either basic or stack\n * @return {?}\n */\nfunction canResize(resizer) {\n    if (resizer === 'basic') {\n        return 'vertical';\n    }\n    return false;\n}\n/**\n * save selection when the editor is focussed out\n * @return {?}\n */\nfunction saveSelection() {\n    if (window.getSelection) {\n        /** @type {?} */\n        var sel = window.getSelection();\n        if (sel.getRangeAt && sel.rangeCount) {\n            return sel.getRangeAt(0);\n        }\n    }\n    else if (document.getSelection && document.createRange) {\n        return document.createRange();\n    }\n    return null;\n}\n/**\n * restore selection when the editor is focussed in\n *\n * @param {?} range saved selection when the editor is focussed out\n * @return {?}\n */\nfunction restoreSelection(range) {\n    if (range) {\n        if (window.getSelection) {\n            /** @type {?} */\n            var sel = window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n            return true;\n        }\n        else if (document.getSelection && range.select) {\n            range.select();\n            return true;\n        }\n    }\n    else {\n        return false;\n    }\n}\nvar Utils = /*#__PURE__*/ /*@__PURE__*/ Object.freeze({\n    canEnableToolbarOptions: canEnableToolbarOptions,\n    getEditorConfiguration: getEditorConfiguration,\n    canResize: canResize,\n    saveSelection: saveSelection,\n    restoreSelection: restoreSelection\n});\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar CommandExecutorService = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     *\n     * @param _http HTTP Client for making http requests\n     */\n    function CommandExecutorService(_http) {\n        this._http = _http;\n        /**\n         * saves the selection from the editor when focussed out\n         */\n        this.savedSelection = undefined;\n    }\n    /**\n     * executes command from the toolbar\n     *\n     * @param command command to be executed\n     */\n    /**\n     * executes command from the toolbar\n     *\n     * @param {?} command command to be executed\n     * @return {?}\n     */\n    CommandExecutorService.prototype.execute = /**\n     * executes command from the toolbar\n     *\n     * @param {?} command command to be executed\n     * @return {?}\n     */\n        function (command) {\n            if (!this.savedSelection && command !== 'enableObjectResizing') {\n                throw new Error('Range out of Editor');\n            }\n            if (command === 'enableObjectResizing') {\n                document.execCommand('enableObjectResizing', true);\n            }\n            if (command === 'blockquote') {\n                document.execCommand('formatBlock', false, 'blockquote');\n            }\n            if (command === 'removeBlockquote') {\n                document.execCommand('formatBlock', false, 'div');\n            }\n            document.execCommand(command, false, null);\n        };\n    /**\n     * inserts image in the editor\n     *\n     * @param imageURI url of the image to be inserted\n     */\n    /**\n     * inserts image in the editor\n     *\n     * @param {?} imageURI url of the image to be inserted\n     * @return {?}\n     */\n    CommandExecutorService.prototype.insertImage = /**\n     * inserts image in the editor\n     *\n     * @param {?} imageURI url of the image to be inserted\n     * @return {?}\n     */\n        function (imageURI) {\n            if (this.savedSelection) {\n                if (imageURI) {\n                    /** @type {?} */\n                    var restored = restoreSelection(this.savedSelection);\n                    if (restored) {\n                        /** @type {?} */\n                        var inserted = document.execCommand('insertImage', false, imageURI);\n                        if (!inserted) {\n                            throw new Error('Invalid URL');\n                        }\n                    }\n                }\n            }\n            else {\n                throw new Error('Range out of the editor');\n            }\n        };\n    /**\n   * inserts image in the editor\n   *\n   * @param videParams url of the image to be inserted\n   */\n    /**\n     * inserts image in the editor\n     *\n     * @param {?} videParams url of the image to be inserted\n     * @return {?}\n     */\n    CommandExecutorService.prototype.insertVideo = /**\n     * inserts image in the editor\n     *\n     * @param {?} videParams url of the image to be inserted\n     * @return {?}\n     */\n        function (videParams) {\n            if (this.savedSelection) {\n                if (videParams) {\n                    /** @type {?} */\n                    var restored = restoreSelection(this.savedSelection);\n                    if (restored) {\n                        if (this.isYoutubeLink(videParams.videoUrl)) {\n                            /** @type {?} */\n                            var youtubeURL = '<iframe width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\n                                + 'src=\"' + videParams.videoUrl + '\"></iframe>';\n                            this.insertHtml(youtubeURL);\n                        }\n                        else if (this.checkTagSupportInBrowser('video')) {\n                            if (this.isValidURL(videParams.videoUrl)) {\n                                /** @type {?} */\n                                var videoSrc = '<video width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\n                                    + ' controls=\"true\"><source src=\"' + videParams.videoUrl + '\"></video>';\n                                this.insertHtml(videoSrc);\n                            }\n                            else {\n                                throw new Error('Invalid video URL');\n                            }\n                        }\n                        else {\n                            throw new Error('Unable to insert video');\n                        }\n                    }\n                }\n            }\n            else {\n                throw new Error('Range out of the editor');\n            }\n        };\n    /**\n     * checks the input url is a valid youtube URL or not\n     *\n     * @param {?} url Youtue URL\n     * @return {?}\n     */\n    CommandExecutorService.prototype.isYoutubeLink = /**\n     * checks the input url is a valid youtube URL or not\n     *\n     * @param {?} url Youtue URL\n     * @return {?}\n     */\n        function (url) {\n            /** @type {?} */\n            var ytRegExp = /^(http(s)?:\\/\\/)?((w){3}.)?youtu(be|.be)?(\\.com)?\\/.+/;\n            return ytRegExp.test(url);\n        };\n    /**\n     * check whether the string is a valid url or not\n     * @param {?} url url\n     * @return {?}\n     */\n    CommandExecutorService.prototype.isValidURL = /**\n     * check whether the string is a valid url or not\n     * @param {?} url url\n     * @return {?}\n     */\n        function (url) {\n            /** @type {?} */\n            var urlRegExp = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\n            return urlRegExp.test(url);\n        };\n    /**\n     * uploads image to the server\n     *\n     * @param file file that has to be uploaded\n     * @param endPoint enpoint to which the image has to be uploaded\n     */\n    /**\n     * uploads image to the server\n     *\n     * @param {?} file file that has to be uploaded\n     * @param {?} endPoint enpoint to which the image has to be uploaded\n     * @return {?}\n     */\n    CommandExecutorService.prototype.uploadImage = /**\n     * uploads image to the server\n     *\n     * @param {?} file file that has to be uploaded\n     * @param {?} endPoint enpoint to which the image has to be uploaded\n     * @return {?}\n     */\n        function (file, endPoint) {\n            if (!endPoint) {\n                throw new Error('Image Endpoint isn`t provided or invalid');\n            }\n            /** @type {?} */\n            var formData = new FormData();\n            if (file) {\n                formData.append('file', file);\n                /** @type {?} */\n                var req = new HttpRequest('POST', endPoint, formData, {\n                    reportProgress: true\n                });\n                return this._http.request(req);\n            }\n            else {\n                throw new Error('Invalid Image');\n            }\n        };\n    /**\n     * inserts link in the editor\n     *\n     * @param params parameters that holds the information for the link\n     */\n    /**\n     * inserts link in the editor\n     *\n     * @param {?} params parameters that holds the information for the link\n     * @return {?}\n     */\n    CommandExecutorService.prototype.createLink = /**\n     * inserts link in the editor\n     *\n     * @param {?} params parameters that holds the information for the link\n     * @return {?}\n     */\n        function (params) {\n            if (this.savedSelection) {\n                /**\n                       * check whether the saved selection contains a range or plain selection\n                       */\n                if (params.urlNewTab) {\n                    /** @type {?} */\n                    var newUrl = '<a href=\"' + params.urlLink + '\" target=\"_blank\">' + params.urlText + '</a>';\n                    if (document.getSelection().type !== 'Range') {\n                        /** @type {?} */\n                        var restored = restoreSelection(this.savedSelection);\n                        if (restored) {\n                            this.insertHtml(newUrl);\n                        }\n                    }\n                    else {\n                        throw new Error('Only new links can be inserted. You cannot edit URL`s');\n                    }\n                }\n                else {\n                    /** @type {?} */\n                    var restored = restoreSelection(this.savedSelection);\n                    if (restored) {\n                        document.execCommand('createLink', false, params.urlLink);\n                    }\n                }\n            }\n            else {\n                throw new Error('Range out of the editor');\n            }\n        };\n    /**\n     * insert color either font or background\n     *\n     * @param color color to be inserted\n     * @param where where the color has to be inserted either text/background\n     */\n    /**\n     * insert color either font or background\n     *\n     * @param {?} color color to be inserted\n     * @param {?} where where the color has to be inserted either text/background\n     * @return {?}\n     */\n    CommandExecutorService.prototype.insertColor = /**\n     * insert color either font or background\n     *\n     * @param {?} color color to be inserted\n     * @param {?} where where the color has to be inserted either text/background\n     * @return {?}\n     */\n        function (color, where) {\n            if (this.savedSelection) {\n                /** @type {?} */\n                var restored = restoreSelection(this.savedSelection);\n                if (restored && this.checkSelection()) {\n                    if (where === 'textColor') {\n                        document.execCommand('foreColor', false, color);\n                    }\n                    else {\n                        document.execCommand('hiliteColor', false, color);\n                    }\n                }\n            }\n            else {\n                throw new Error('Range out of the editor');\n            }\n        };\n    /**\n     * set font size for text\n     *\n     * @param fontSize font-size to be set\n     */\n    /**\n     * set font size for text\n     *\n     * @param {?} fontSize font-size to be set\n     * @return {?}\n     */\n    CommandExecutorService.prototype.setFontSize = /**\n     * set font size for text\n     *\n     * @param {?} fontSize font-size to be set\n     * @return {?}\n     */\n        function (fontSize) {\n            if (this.savedSelection && this.checkSelection()) {\n                /** @type {?} */\n                var deletedValue = this.deleteAndGetElement();\n                if (deletedValue) {\n                    /** @type {?} */\n                    var restored = restoreSelection(this.savedSelection);\n                    if (restored) {\n                        if (this.isNumeric(fontSize)) {\n                            /** @type {?} */\n                            var fontPx = '<span style=\"font-size: ' + fontSize + 'px;\">' + deletedValue + '</span>';\n                            this.insertHtml(fontPx);\n                        }\n                        else {\n                            /** @type {?} */\n                            var fontPx = '<span style=\"font-size: ' + fontSize + ';\">' + deletedValue + '</span>';\n                            this.insertHtml(fontPx);\n                        }\n                    }\n                }\n            }\n            else {\n                throw new Error('Range out of the editor');\n            }\n        };\n    /**\n     * set font name/family for text\n     *\n     * @param fontName font-family to be set\n     */\n    /**\n     * set font name/family for text\n     *\n     * @param {?} fontName font-family to be set\n     * @return {?}\n     */\n    CommandExecutorService.prototype.setFontName = /**\n     * set font name/family for text\n     *\n     * @param {?} fontName font-family to be set\n     * @return {?}\n     */\n        function (fontName) {\n            if (this.savedSelection && this.checkSelection()) {\n                /** @type {?} */\n                var deletedValue = this.deleteAndGetElement();\n                if (deletedValue) {\n                    /** @type {?} */\n                    var restored = restoreSelection(this.savedSelection);\n                    if (restored) {\n                        if (this.isNumeric(fontName)) {\n                            /** @type {?} */\n                            var fontFamily = '<span style=\"font-family: ' + fontName + 'px;\">' + deletedValue + '</span>';\n                            this.insertHtml(fontFamily);\n                        }\n                        else {\n                            /** @type {?} */\n                            var fontFamily = '<span style=\"font-family: ' + fontName + ';\">' + deletedValue + '</span>';\n                            this.insertHtml(fontFamily);\n                        }\n                    }\n                }\n            }\n            else {\n                throw new Error('Range out of the editor');\n            }\n        };\n    /**\n     * insert HTML\n     * @param {?} html\n     * @return {?}\n     */\n    CommandExecutorService.prototype.insertHtml = /**\n     * insert HTML\n     * @param {?} html\n     * @return {?}\n     */\n        function (html) {\n            /** @type {?} */\n            var isHTMLInserted = document.execCommand('insertHTML', false, html);\n            if (!isHTMLInserted) {\n                throw new Error('Unable to perform the operation');\n            }\n        };\n    /**\n     * check whether the value is a number or string\n     * if number return true\n     * else return false\n     * @param {?} value\n     * @return {?}\n     */\n    CommandExecutorService.prototype.isNumeric = /**\n     * check whether the value is a number or string\n     * if number return true\n     * else return false\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return /^-{0,1}\\d+$/.test(value);\n        };\n    /**\n     * delete the text at selected range and return the value\n     * @return {?}\n     */\n    CommandExecutorService.prototype.deleteAndGetElement = /**\n     * delete the text at selected range and return the value\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var slectedText;\n            if (this.savedSelection) {\n                slectedText = this.savedSelection.toString();\n                this.savedSelection.deleteContents();\n                return slectedText;\n            }\n            return false;\n        };\n    /**\n     * check any slection is made or not\n     * @return {?}\n     */\n    CommandExecutorService.prototype.checkSelection = /**\n     * check any slection is made or not\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var slectedText = this.savedSelection.toString();\n            if (slectedText.length === 0) {\n                throw new Error('No Selection Made');\n            }\n            return true;\n        };\n    /**\n     * check tag is supported by browser or not\n     *\n     * @param {?} tag HTML tag\n     * @return {?}\n     */\n    CommandExecutorService.prototype.checkTagSupportInBrowser = /**\n     * check tag is supported by browser or not\n     *\n     * @param {?} tag HTML tag\n     * @return {?}\n     */\n        function (tag) {\n            return !(document.createElement(tag) instanceof HTMLUnknownElement);\n        };\n    return CommandExecutorService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * time in which the message has to be cleared\n  @type {?} */\nvar DURATION = 7000;\nvar MessageService = /** @class */ /*@__PURE__*/ (function () {\n    function MessageService() {\n        /**\n         * variable to hold the user message\n         */\n        this.message = new Subject();\n    }\n    /** returns the message sent by the editor */\n    /**\n     * returns the message sent by the editor\n     * @return {?}\n     */\n    MessageService.prototype.getMessage = /**\n     * returns the message sent by the editor\n     * @return {?}\n     */\n        function () {\n            return this.message.asObservable();\n        };\n    /**\n     * sends message to the editor\n     *\n     * @param message message to be sent\n     */\n    /**\n     * sends message to the editor\n     *\n     * @param {?} message message to be sent\n     * @return {?}\n     */\n    MessageService.prototype.sendMessage = /**\n     * sends message to the editor\n     *\n     * @param {?} message message to be sent\n     * @return {?}\n     */\n        function (message) {\n            this.message.next(message);\n            this.clearMessageIn(DURATION);\n        };\n    /**\n     * a short interval to clear message\n     *\n     * @param {?} milliseconds time in seconds in which the message has to be cleared\n     * @return {?}\n     */\n    MessageService.prototype.clearMessageIn = /**\n     * a short interval to clear message\n     *\n     * @param {?} milliseconds time in seconds in which the message has to be cleared\n     * @return {?}\n     */\n        function (milliseconds) {\n            var _this = this;\n            setTimeout(function () {\n                _this.message.next(undefined);\n            }, milliseconds);\n        };\n    return MessageService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * toolbar default configuration\n  @type {?} */\nvar ngxEditorConfig = {\n    editable: true,\n    spellcheck: true,\n    height: 'auto',\n    minHeight: '0',\n    width: 'auto',\n    minWidth: '0',\n    translate: 'yes',\n    enableToolbar: true,\n    showToolbar: true,\n    placeholder: 'Enter text here...',\n    imageEndPoint: '',\n    toolbar: [\n        ['bold', 'italic', 'underline', 'strikeThrough', 'superscript', 'subscript'],\n        ['fontName', 'fontSize', 'color'],\n        ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'indent', 'outdent'],\n        ['cut', 'copy', 'delete', 'removeFormat', 'undo', 'redo'],\n        ['paragraph', 'blockquote', 'removeBlockquote', 'horizontalLine', 'orderedList', 'unorderedList'],\n        ['link', 'unlink', 'image', 'video']\n    ]\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgxEditorComponent = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param _messageService service to send message to the editor message component\n     * @param _commandExecutor executes command from the toolbar\n     * @param _renderer access and manipulate the dom element\n     */\n    function NgxEditorComponent(_messageService, _commandExecutor, _renderer) {\n        this._messageService = _messageService;\n        this._commandExecutor = _commandExecutor;\n        this._renderer = _renderer;\n        /**\n         * The editor can be resized vertically.\n         *\n         * `basic` resizer enables the html5 reszier. Check here https://www.w3schools.com/cssref/css3_pr_resize.asp\n         *\n         * `stack` resizer enable a resizer that looks like as if in https://stackoverflow.com\n         */\n        this.resizer = 'stack';\n        /**\n         * The config property is a JSON object\n         *\n         * All avaibale inputs inputs can be provided in the configuration as JSON\n         * inputs provided directly are considered as top priority\n         */\n        this.config = ngxEditorConfig;\n        /**\n         * emits `blur` event when focused out from the textarea\n         */\n        this.blur = new EventEmitter();\n        /**\n         * emits `focus` event when focused in to the textarea\n         */\n        this.focus = new EventEmitter();\n        this.Utils = Utils;\n    }\n    /**\n     * events\n     */\n    /**\n     * events\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.onTextAreaFocus = /**\n     * events\n     * @return {?}\n     */\n        function () {\n            this.focus.emit('focus');\n        };\n    /** focus the text area when the editor is focussed */\n    /**\n     * focus the text area when the editor is focussed\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.onEditorFocus = /**\n     * focus the text area when the editor is focussed\n     * @return {?}\n     */\n        function () {\n            this.textArea.nativeElement.focus();\n        };\n    /**\n     * Executed from the contenteditable section while the input property changes\n     * @param html html string from contenteditable\n     */\n    /**\n     * Executed from the contenteditable section while the input property changes\n     * @param {?} innerHTML\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.onContentChange = /**\n     * Executed from the contenteditable section while the input property changes\n     * @param {?} innerHTML\n     * @return {?}\n     */\n        function (innerHTML) {\n            if (typeof this.onChange === 'function') {\n                this.onChange(innerHTML);\n                this.togglePlaceholder(innerHTML);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.onTextAreaBlur = /**\n     * @return {?}\n     */\n        function () {\n            /** save selection if focussed out */\n            this._commandExecutor.savedSelection = saveSelection();\n            if (typeof this.onTouched === 'function') {\n                this.onTouched();\n            }\n            this.blur.emit('blur');\n        };\n    /**\n     * resizing text area\n     *\n     * @param offsetY vertical height of the eidtable portion of the editor\n     */\n    /**\n     * resizing text area\n     *\n     * @param {?} offsetY vertical height of the eidtable portion of the editor\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.resizeTextArea = /**\n     * resizing text area\n     *\n     * @param {?} offsetY vertical height of the eidtable portion of the editor\n     * @return {?}\n     */\n        function (offsetY) {\n            /** @type {?} */\n            var newHeight = parseInt(this.height, 10);\n            newHeight += offsetY;\n            this.height = newHeight + 'px';\n            this.textArea.nativeElement.style.height = this.height;\n        };\n    /**\n     * editor actions, i.e., executes command from toolbar\n     *\n     * @param commandName name of the command to be executed\n     */\n    /**\n     * editor actions, i.e., executes command from toolbar\n     *\n     * @param {?} commandName name of the command to be executed\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.executeCommand = /**\n     * editor actions, i.e., executes command from toolbar\n     *\n     * @param {?} commandName name of the command to be executed\n     * @return {?}\n     */\n        function (commandName) {\n            try {\n                this._commandExecutor.execute(commandName);\n            }\n            catch (error) {\n                this._messageService.sendMessage(error.message);\n            }\n        };\n    /**\n     * Write a new value to the element.\n     *\n     * @param value value to be executed when there is a change in contenteditable\n     */\n    /**\n     * Write a new value to the element.\n     *\n     * @param {?} value value to be executed when there is a change in contenteditable\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.writeValue = /**\n     * Write a new value to the element.\n     *\n     * @param {?} value value to be executed when there is a change in contenteditable\n     * @return {?}\n     */\n        function (value) {\n            this.togglePlaceholder(value);\n            if (value === null || value === undefined || value === '' || value === '<br>') {\n                value = null;\n            }\n            this.refreshView(value);\n        };\n    /**\n     * Set the function to be called\n     * when the control receives a change event.\n     *\n     * @param fn a function\n     */\n    /**\n     * Set the function to be called\n     * when the control receives a change event.\n     *\n     * @param {?} fn a function\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.registerOnChange = /**\n     * Set the function to be called\n     * when the control receives a change event.\n     *\n     * @param {?} fn a function\n     * @return {?}\n     */\n        function (fn) {\n            this.onChange = fn;\n        };\n    /**\n     * Set the function to be called\n     * when the control receives a touch event.\n     *\n     * @param fn a function\n     */\n    /**\n     * Set the function to be called\n     * when the control receives a touch event.\n     *\n     * @param {?} fn a function\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.registerOnTouched = /**\n     * Set the function to be called\n     * when the control receives a touch event.\n     *\n     * @param {?} fn a function\n     * @return {?}\n     */\n        function (fn) {\n            this.onTouched = fn;\n        };\n    /**\n     * refresh view/HTML of the editor\n     *\n     * @param value html string from the editor\n     */\n    /**\n     * refresh view/HTML of the editor\n     *\n     * @param {?} value html string from the editor\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.refreshView = /**\n     * refresh view/HTML of the editor\n     *\n     * @param {?} value html string from the editor\n     * @return {?}\n     */\n        function (value) {\n            /** @type {?} */\n            var normalizedValue = value === null ? '' : value;\n            this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n        };\n    /**\n     * toggles placeholder based on input string\n     *\n     * @param value A HTML string from the editor\n     */\n    /**\n     * toggles placeholder based on input string\n     *\n     * @param {?} value A HTML string from the editor\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.togglePlaceholder = /**\n     * toggles placeholder based on input string\n     *\n     * @param {?} value A HTML string from the editor\n     * @return {?}\n     */\n        function (value) {\n            if (!value || value === '<br>' || value === '') {\n                this._renderer.addClass(this.ngxWrapper.nativeElement, 'show-placeholder');\n            }\n            else {\n                this._renderer.removeClass(this.ngxWrapper.nativeElement, 'show-placeholder');\n            }\n        };\n    /**\n     * returns a json containing input params\n     */\n    /**\n     * returns a json containing input params\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.getCollectiveParams = /**\n     * returns a json containing input params\n     * @return {?}\n     */\n        function () {\n            return {\n                editable: this.editable,\n                spellcheck: this.spellcheck,\n                placeholder: this.placeholder,\n                translate: this.translate,\n                height: this.height,\n                minHeight: this.minHeight,\n                width: this.width,\n                minWidth: this.minWidth,\n                enableToolbar: this.enableToolbar,\n                showToolbar: this.showToolbar,\n                imageEndPoint: this.imageEndPoint,\n                toolbar: this.toolbar\n            };\n        };\n    /**\n     * @return {?}\n     */\n    NgxEditorComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            /**\n                 * set configuartion\n                 */\n            this.config = this.Utils.getEditorConfiguration(this.config, ngxEditorConfig, this.getCollectiveParams());\n            this.height = this.height || this.textArea.nativeElement.offsetHeight;\n            this.executeCommand('enableObjectResizing');\n        };\n    return NgxEditorComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgxGrippieComponent = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * Constructor\n     *\n     * @param _editorComponent Editor component\n     */\n    function NgxGrippieComponent(_editorComponent) {\n        this._editorComponent = _editorComponent;\n        /**\n         * previous value befor resizing the editor\n         */\n        this.oldY = 0;\n        /**\n         * set to true on mousedown event\n         */\n        this.grabber = false;\n    }\n    /**\n     *\n     * @param event Mouseevent\n     *\n     * Update the height of the editor when the grabber is dragged\n     */\n    /**\n     *\n     * @param {?} event Mouseevent\n     *\n     * Update the height of the editor when the grabber is dragged\n     * @return {?}\n     */\n    NgxGrippieComponent.prototype.onMouseMove = /**\n     *\n     * @param {?} event Mouseevent\n     *\n     * Update the height of the editor when the grabber is dragged\n     * @return {?}\n     */\n        function (event) {\n            if (!this.grabber) {\n                return;\n            }\n            this._editorComponent.resizeTextArea(event.clientY - this.oldY);\n            this.oldY = event.clientY;\n        };\n    /**\n     *\n     * @param event Mouseevent\n     *\n     * set the grabber to false on mouse up action\n     */\n    /**\n     *\n     * @param {?} event Mouseevent\n     *\n     * set the grabber to false on mouse up action\n     * @return {?}\n     */\n    NgxGrippieComponent.prototype.onMouseUp = /**\n     *\n     * @param {?} event Mouseevent\n     *\n     * set the grabber to false on mouse up action\n     * @return {?}\n     */\n        function (event) {\n            this.grabber = false;\n        };\n    /**\n     * @param {?} event\n     * @param {?=} resizer\n     * @return {?}\n     */\n    NgxGrippieComponent.prototype.onResize = /**\n     * @param {?} event\n     * @param {?=} resizer\n     * @return {?}\n     */\n        function (event, resizer) {\n            this.grabber = true;\n            this.oldY = event.clientY;\n            event.preventDefault();\n        };\n    return NgxGrippieComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgxEditorMessageComponent = /** @class */ /*@__PURE__*/ (function () {\n    /**\n     * @param _messageService service to send message to the editor\n     */\n    function NgxEditorMessageComponent(_messageService) {\n        var _this = this;\n        this._messageService = _messageService;\n        /**\n         * property that holds the message to be displayed on the editor\n         */\n        this.ngxMessage = undefined;\n        this._messageService.getMessage().subscribe(function (message) { return _this.ngxMessage = message; });\n    }\n    /**\n     * clears editor message\n     */\n    /**\n     * clears editor message\n     * @return {?}\n     */\n    NgxEditorMessageComponent.prototype.clearMessage = /**\n     * clears editor message\n     * @return {?}\n     */\n        function () {\n            this.ngxMessage = undefined;\n        };\n    return NgxEditorMessageComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgxEditorToolbarComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NgxEditorToolbarComponent(_popOverConfig, _formBuilder, _messageService, _commandExecutorService) {\n        this._popOverConfig = _popOverConfig;\n        this._formBuilder = _formBuilder;\n        this._messageService = _messageService;\n        this._commandExecutorService = _commandExecutorService;\n        /**\n         * set to false when image is being uploaded\n         */\n        this.uploadComplete = true;\n        /**\n         * upload percentage\n         */\n        this.updloadPercentage = 0;\n        /**\n         * set to true when the image is being uploaded\n         */\n        this.isUploading = false;\n        /**\n         * which tab to active for color insetion\n         */\n        this.selectedColorTab = 'textColor';\n        /**\n         * font family name\n         */\n        this.fontName = '';\n        /**\n         * font size\n         */\n        this.fontSize = '';\n        /**\n         * hex color code\n         */\n        this.hexColor = '';\n        /**\n         * show/hide image uploader\n         */\n        this.isImageUploader = false;\n        /**\n         * Emits an event when a toolbar button is clicked\n         */\n        this.execute = new EventEmitter();\n        this._popOverConfig.outsideClick = true;\n        this._popOverConfig.placement = 'bottom';\n        this._popOverConfig.container = 'body';\n    }\n    /**\n     * enable or diable toolbar based on configuration\n     *\n     * @param value name of the toolbar buttons\n     */\n    /**\n     * enable or diable toolbar based on configuration\n     *\n     * @param {?} value name of the toolbar buttons\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.canEnableToolbarOptions = /**\n     * enable or diable toolbar based on configuration\n     *\n     * @param {?} value name of the toolbar buttons\n     * @return {?}\n     */\n        function (value) {\n            return canEnableToolbarOptions(value, this.config['toolbar']);\n        };\n    /**\n     * triggers command from the toolbar to be executed and emits an event\n     *\n     * @param command name of the command to be executed\n     */\n    /**\n     * triggers command from the toolbar to be executed and emits an event\n     *\n     * @param {?} command name of the command to be executed\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.triggerCommand = /**\n     * triggers command from the toolbar to be executed and emits an event\n     *\n     * @param {?} command name of the command to be executed\n     * @return {?}\n     */\n        function (command) {\n            this.execute.emit(command);\n        };\n    /**\n     * create URL insert form\n     */\n    /**\n     * create URL insert form\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.buildUrlForm = /**\n     * create URL insert form\n     * @return {?}\n     */\n        function () {\n            this.urlForm = this._formBuilder.group({\n                urlLink: ['', [Validators.required]],\n                urlText: ['', [Validators.required]],\n                urlNewTab: [true]\n            });\n        };\n    /**\n     * inserts link in the editor\n     */\n    /**\n     * inserts link in the editor\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.insertLink = /**\n     * inserts link in the editor\n     * @return {?}\n     */\n        function () {\n            try {\n                this._commandExecutorService.createLink(this.urlForm.value);\n            }\n            catch (error) {\n                this._messageService.sendMessage(error.message);\n            }\n            /** reset form to default */\n            this.buildUrlForm();\n            /** close inset URL pop up */\n            this.urlPopover.hide();\n        };\n    /**\n     * create insert image form\n     */\n    /**\n     * create insert image form\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.buildImageForm = /**\n     * create insert image form\n     * @return {?}\n     */\n        function () {\n            this.imageForm = this._formBuilder.group({\n                imageUrl: ['', [Validators.required]]\n            });\n        };\n    /**\n     * create insert image form\n     */\n    /**\n     * create insert image form\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.buildVideoForm = /**\n     * create insert image form\n     * @return {?}\n     */\n        function () {\n            this.videoForm = this._formBuilder.group({\n                videoUrl: ['', [Validators.required]],\n                height: [''],\n                width: ['']\n            });\n        };\n    /**\n     * Executed when file is selected\n     *\n     * @param e onChange event\n     */\n    /**\n     * Executed when file is selected\n     *\n     * @param {?} e onChange event\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.onFileChange = /**\n     * Executed when file is selected\n     *\n     * @param {?} e onChange event\n     * @return {?}\n     */\n        function (e) {\n            var _this = this;\n            this.uploadComplete = false;\n            this.isUploading = true;\n            if (e.target.files.length > 0) {\n                /** @type {?} */\n                var file = e.target.files[0];\n                try {\n                    this._commandExecutorService.uploadImage(file, this.config.imageEndPoint).subscribe(function (event) {\n                        if (event.type) {\n                            _this.updloadPercentage = Math.round(100 * event.loaded / event.total);\n                        }\n                        if (event instanceof HttpResponse) {\n                            try {\n                                _this._commandExecutorService.insertImage(event.body.url);\n                            }\n                            catch (error) {\n                                _this._messageService.sendMessage(error.message);\n                            }\n                            _this.uploadComplete = true;\n                            _this.isUploading = false;\n                        }\n                    });\n                }\n                catch (error) {\n                    this._messageService.sendMessage(error.message);\n                    this.uploadComplete = true;\n                    this.isUploading = false;\n                }\n            }\n        };\n    /** insert image in the editor */\n    /**\n     * insert image in the editor\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.insertImage = /**\n     * insert image in the editor\n     * @return {?}\n     */\n        function () {\n            try {\n                this._commandExecutorService.insertImage(this.imageForm.value.imageUrl);\n            }\n            catch (error) {\n                this._messageService.sendMessage(error.message);\n            }\n            /** reset form to default */\n            this.buildImageForm();\n            /** close inset URL pop up */\n            this.imagePopover.hide();\n        };\n    /** insert image in the editor */\n    /**\n     * insert image in the editor\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.insertVideo = /**\n     * insert image in the editor\n     * @return {?}\n     */\n        function () {\n            try {\n                this._commandExecutorService.insertVideo(this.videoForm.value);\n            }\n            catch (error) {\n                this._messageService.sendMessage(error.message);\n            }\n            /** reset form to default */\n            this.buildVideoForm();\n            /** close inset URL pop up */\n            this.videoPopover.hide();\n        };\n    /** inser text/background color */\n    /**\n     * inser text/background color\n     * @param {?} color\n     * @param {?} where\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.insertColor = /**\n     * inser text/background color\n     * @param {?} color\n     * @param {?} where\n     * @return {?}\n     */\n        function (color, where) {\n            try {\n                this._commandExecutorService.insertColor(color, where);\n            }\n            catch (error) {\n                this._messageService.sendMessage(error.message);\n            }\n            this.colorPopover.hide();\n        };\n    /** set font size */\n    /**\n     * set font size\n     * @param {?} fontSize\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.setFontSize = /**\n     * set font size\n     * @param {?} fontSize\n     * @return {?}\n     */\n        function (fontSize) {\n            try {\n                this._commandExecutorService.setFontSize(fontSize);\n            }\n            catch (error) {\n                this._messageService.sendMessage(error.message);\n            }\n            this.fontSizePopover.hide();\n        };\n    /** set font Name/family */\n    /**\n     * set font Name/family\n     * @param {?} fontName\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.setFontName = /**\n     * set font Name/family\n     * @param {?} fontName\n     * @return {?}\n     */\n        function (fontName) {\n            try {\n                this._commandExecutorService.setFontName(fontName);\n            }\n            catch (error) {\n                this._messageService.sendMessage(error.message);\n            }\n            this.fontSizePopover.hide();\n        };\n    /**\n     * @return {?}\n     */\n    NgxEditorToolbarComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.buildUrlForm();\n            this.buildImageForm();\n            this.buildVideoForm();\n        };\n    return NgxEditorToolbarComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgxEditorModule = /** @class */ /*@__PURE__*/ (function () {\n    function NgxEditorModule() {\n    }\n    return NgxEditorModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @param {?} maxlength\n * @param {?=} options\n * @return {?}\n */\nfunction MaxLengthValidator(maxlength, options) {\n    return function (control) {\n        /** @type {?} */\n        var parsedDocument = new DOMParser().parseFromString(control.value, 'text/html');\n        /** @type {?} */\n        var innerText = parsedDocument.body.innerText || '';\n        // replace all linebreaks\n        if (options.excludeLineBreaks) {\n            innerText = innerText.replace(/(\\r\\n\\t|\\n|\\r\\t)/gm, '');\n        }\n        // concat multiple whitespaces into a single whitespace\n        if (options.concatWhiteSpaces) {\n            innerText = innerText.replace(/(\\s\\s+)/gm, ' ');\n        }\n        // remove all whitespaces\n        if (options.excludeWhiteSpaces) {\n            innerText = innerText.replace(/(\\s)/gm, '');\n        }\n        if (innerText.length > maxlength) {\n            return {\n                ngxEditor: {\n                    allowedLength: maxlength,\n                    textLength: innerText.length\n                }\n            };\n        }\n        return null;\n    };\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { NgxEditorModule, MaxLengthValidator, CommandExecutorService as ɵc, MessageService as ɵb, NgxEditorMessageComponent as ɵe, NgxEditorToolbarComponent as ɵf, NgxEditorComponent as ɵa, NgxGrippieComponent as ɵd };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",null]}