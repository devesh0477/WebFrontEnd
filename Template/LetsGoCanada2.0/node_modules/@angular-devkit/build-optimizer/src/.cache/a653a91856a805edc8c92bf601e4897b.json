{"remainingRequest":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/ngx-bootstrap/tooltip/fesm5/ngx-bootstrap-tooltip.js","dependencies":[{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/ngx-bootstrap/tooltip/fesm5/ngx-bootstrap-tooltip.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,ngx_bootstrap_utils,tslib,ngx_bootstrap_component_loader,ngx_bootstrap_positioning,rxjs,_angular_common PURE_IMPORTS_END */\nimport { Injectable, Component, ChangeDetectionStrategy, Directive, ViewContainerRef, ElementRef, Renderer2, Input, Output, HostBinding, EventEmitter, NgModule } from '@angular/core';\nimport { isBs3, warnOnce, parseTriggers, OnChange } from 'ngx-bootstrap/utils';\nimport { __decorate, __metadata } from 'tslib';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\nimport { timer } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default values provider for tooltip\n */\nvar TooltipConfig = /** @class */ /*@__PURE__*/ (function () {\n    function TooltipConfig() {\n        /**\n         * sets disable adaptive position\n         */\n        this.adaptivePosition = true;\n        /**\n         * tooltip placement, supported positions: 'top', 'bottom', 'left', 'right'\n         */\n        this.placement = 'top';\n        /**\n         * array of event names which triggers tooltip opening\n         */\n        this.triggers = 'hover focus';\n        /**\n         * delay before showing the tooltip\n         */\n        this.delay = 0;\n    }\n    return TooltipConfig;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TooltipContainerComponent = /** @class */ /*@__PURE__*/ (function () {\n    function TooltipContainerComponent(config) {\n        Object.assign(this, config);\n    }\n    Object.defineProperty(TooltipContainerComponent.prototype, \"isBs3\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return isBs3();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TooltipContainerComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            this.classMap = { in: false, fade: false };\n            this.classMap[this.placement] = true;\n            this.classMap[\"tooltip-\" + this.placement] = true;\n            this.classMap.in = true;\n            if (this.animation) {\n                this.classMap.fade = true;\n            }\n            if (this.containerClass) {\n                this.classMap[this.containerClass] = true;\n            }\n        };\n    return TooltipContainerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar id = 0;\nvar TooltipDirective = /** @class */ /*@__PURE__*/ (function () {\n    function TooltipDirective(_viewContainerRef, cis, config, _elementRef, _renderer, _positionService) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._positionService = _positionService;\n        this.tooltipId = id++;\n        /**\n         * Fired when tooltip content changes\n         */\n        /* tslint:disable-next-line:no-any */\n        this.tooltipChange = new EventEmitter();\n        /**\n         * Css class for tooltip container\n         */\n        this.containerClass = '';\n        /**\n         * @deprecated - removed, will be added to configuration\n         */\n        this.tooltipAnimation = true;\n        /**\n         * @deprecated\n         */\n        this.tooltipFadeDuration = 150;\n        this.ariaDescribedby = \"tooltip-\" + this.tooltipId;\n        /**\n         * @deprecated\n         */\n        this.tooltipStateChanged = new EventEmitter();\n        this._tooltip = cis\n            .createLoader(this._elementRef, _viewContainerRef, this._renderer)\n            .provide({ provide: TooltipConfig, useValue: config });\n        Object.assign(this, config);\n        this.onShown = this._tooltip.onShown;\n        this.onHidden = this._tooltip.onHidden;\n    }\n    Object.defineProperty(TooltipDirective.prototype, \"isOpen\", {\n        /**\n         * Returns whether or not the tooltip is currently being shown\n         */\n        get: /**\n         * Returns whether or not the tooltip is currently being shown\n         * @return {?}\n         */ function () {\n            return this._tooltip.isShown;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value) {\n                this.show();\n            }\n            else {\n                this.hide();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"htmlContent\", {\n        /** @deprecated - please use `tooltip` instead */\n        set: /**\n         * @deprecated - please use `tooltip` instead\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            warnOnce('tooltipHtml was deprecated, please use `tooltip` instead');\n            this.tooltip = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"_placement\", {\n        /** @deprecated - please use `placement` instead */\n        set: /**\n         * @deprecated - please use `placement` instead\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            warnOnce('tooltipPlacement was deprecated, please use `placement` instead');\n            this.placement = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"_isOpen\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n            return this.isOpen;\n        },\n        /** @deprecated - please use `isOpen` instead */\n        set: /**\n         * @deprecated - please use `isOpen` instead\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            warnOnce('tooltipIsOpen was deprecated, please use `isOpen` instead');\n            this.isOpen = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"_enable\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n            return this.isDisabled;\n        },\n        /** @deprecated - please use `isDisabled` instead */\n        set: /**\n         * @deprecated - please use `isDisabled` instead\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            warnOnce('tooltipEnable was deprecated, please use `isDisabled` instead');\n            this.isDisabled = !value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"_appendToBody\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n            return this.container === 'body';\n        },\n        /** @deprecated - please use `container=\"body\"` instead */\n        set: /**\n         * @deprecated - please use `container=\"body\"` instead\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            warnOnce('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n            this.container = value ? 'body' : this.container;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"_popupClass\", {\n        /** @deprecated - will replaced with customClass */\n        set: /**\n         * @deprecated - will replaced with customClass\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            warnOnce('tooltipClass deprecated');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"_tooltipContext\", {\n        /** @deprecated - removed */\n        set: /**\n         * @deprecated - removed\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            warnOnce('tooltipContext deprecated');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"_tooltipPopupDelay\", {\n        /** @deprecated */\n        set: /**\n         * @deprecated\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            warnOnce('tooltipPopupDelay is deprecated, use `delay` instead');\n            this.delay = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TooltipDirective.prototype, \"_tooltipTrigger\", {\n        /** @deprecated -  please use `triggers` instead */\n        get: /**\n         * @deprecated -  please use `triggers` instead\n         * @return {?}\n         */ function () {\n            warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n            return this.triggers;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            warnOnce('tooltipTrigger was deprecated, please use `triggers` instead');\n            this.triggers = (value || '').toString();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TooltipDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._tooltip.listen({\n                triggers: this.triggers,\n                show: ( /**\n                 * @return {?}\n                 */function () { return _this.show(); })\n            });\n            /* tslint:disable-next-line:no-any */\n            this.tooltipChange.subscribe(( /**\n             * @param {?} value\n             * @return {?}\n             */function (value) {\n                if (!value) {\n                    _this._tooltip.hide();\n                }\n            }));\n        };\n    /**\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     */\n    /**\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     * @return {?}\n     */\n    TooltipDirective.prototype.toggle = /**\n     * Toggles an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     * @return {?}\n     */\n        function () {\n            if (this.isOpen) {\n                return this.hide();\n            }\n            this.show();\n        };\n    /**\n     * Opens an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     */\n    /**\n     * Opens an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     * @return {?}\n     */\n    TooltipDirective.prototype.show = /**\n     * Opens an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._positionService.setOptions({\n                modifiers: {\n                    flip: {\n                        enabled: this.adaptivePosition\n                    },\n                    preventOverflow: {\n                        enabled: this.adaptivePosition\n                    }\n                }\n            });\n            if (this.isOpen ||\n                this.isDisabled ||\n                this._delayTimeoutId ||\n                !this.tooltip) {\n                return;\n            }\n            /** @type {?} */\n            var showTooltip = ( /**\n             * @return {?}\n             */function () {\n                if (_this._delayTimeoutId) {\n                    _this._delayTimeoutId = undefined;\n                }\n                _this._tooltip\n                    .attach(TooltipContainerComponent)\n                    .to(_this.container)\n                    .position({ attachment: _this.placement })\n                    .show({\n                    content: _this.tooltip,\n                    placement: _this.placement,\n                    containerClass: _this.containerClass,\n                    id: _this.ariaDescribedby\n                });\n            });\n            /** @type {?} */\n            var cancelDelayedTooltipShowing = ( /**\n             * @return {?}\n             */function () {\n                if (_this._tooltipCancelShowFn) {\n                    _this._tooltipCancelShowFn();\n                }\n            });\n            if (this.delay) {\n                /** @type {?} */\n                var _timer_1 = timer(this.delay).subscribe(( /**\n                 * @return {?}\n                 */function () {\n                    showTooltip();\n                    cancelDelayedTooltipShowing();\n                }));\n                if (this.triggers) {\n                    /** @type {?} */\n                    var triggers = parseTriggers(this.triggers);\n                    this._tooltipCancelShowFn = this._renderer.listen(this._elementRef.nativeElement, triggers[0].close, ( /**\n                     * @return {?}\n                     */function () {\n                        _timer_1.unsubscribe();\n                        cancelDelayedTooltipShowing();\n                    }));\n                }\n            }\n            else {\n                showTooltip();\n            }\n        };\n    /**\n     * Closes an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     */\n    /**\n     * Closes an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     * @return {?}\n     */\n    TooltipDirective.prototype.hide = /**\n     * Closes an element’s tooltip. This is considered a “manual” triggering of\n     * the tooltip.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this._delayTimeoutId) {\n                clearTimeout(this._delayTimeoutId);\n                this._delayTimeoutId = undefined;\n            }\n            if (!this._tooltip.isShown) {\n                return;\n            }\n            this._tooltip.instance.classMap.in = false;\n            setTimeout(( /**\n             * @return {?}\n             */function () {\n                _this._tooltip.hide();\n            }), this.tooltipFadeDuration);\n        };\n    /**\n     * @return {?}\n     */\n    TooltipDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._tooltip.dispose();\n        };\n    __decorate([\n        OnChange(),\n        __metadata(\"design:type\", Object)\n    ], TooltipDirective.prototype, \"tooltip\", void 0);\n    return TooltipDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar TooltipModule = /** @class */ /*@__PURE__*/ (function () {\n    function TooltipModule() {\n    }\n    /**\n     * @return {?}\n     */\n    TooltipModule.forRoot = /**\n     * @return {?}\n     */\n        function () {\n            return {\n                ngModule: TooltipModule,\n                providers: [TooltipConfig, ComponentLoaderFactory, PositioningService]\n            };\n        };\n    return TooltipModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { TooltipConfig, TooltipContainerComponent, TooltipDirective, TooltipModule };\n//# sourceMappingURL=ngx-bootstrap-tooltip.js.map\n",null]}