{"remainingRequest":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/jw-paginate/lib/jw-paginate.js","dependencies":[{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/jw-paginate/lib/jw-paginate.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/deveshverma/Desktop/LetsGoCanada2/WebFrontEnd/Template/LetsGoCanada2.0/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["\"use strict\";\nfunction paginate(totalItems, currentPage, pageSize, maxPages) {\n    if (currentPage === void 0) { currentPage = 1; }\n    if (pageSize === void 0) { pageSize = 10; }\n    if (maxPages === void 0) { maxPages = 10; }\n    // calculate total pages\n    var totalPages = Math.ceil(totalItems / pageSize);\n    // ensure current page isn't out of range\n    if (currentPage < 1) {\n        currentPage = 1;\n    }\n    else if (currentPage > totalPages) {\n        currentPage = totalPages;\n    }\n    var startPage, endPage;\n    if (totalPages <= maxPages) {\n        // total pages less than max so show all pages\n        startPage = 1;\n        endPage = totalPages;\n    }\n    else {\n        // total pages more than max so calculate start and end pages\n        var maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);\n        var maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;\n        if (currentPage <= maxPagesBeforeCurrentPage) {\n            // current page near the start\n            startPage = 1;\n            endPage = maxPages;\n        }\n        else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\n            // current page near the end\n            startPage = totalPages - maxPages + 1;\n            endPage = totalPages;\n        }\n        else {\n            // current page somewhere in the middle\n            startPage = currentPage - maxPagesBeforeCurrentPage;\n            endPage = currentPage + maxPagesAfterCurrentPage;\n        }\n    }\n    // calculate start and end item indexes\n    var startIndex = (currentPage - 1) * pageSize;\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n    // create an array of pages to ng-repeat in the pager control\n    var pages = Array.from(Array((endPage + 1) - startPage).keys()).map(function (i) { return startPage + i; });\n    // return object with all pager properties required by the view\n    return {\n        totalItems: totalItems,\n        currentPage: currentPage,\n        pageSize: pageSize,\n        totalPages: totalPages,\n        startPage: startPage,\n        endPage: endPage,\n        startIndex: startIndex,\n        endIndex: endIndex,\n        pages: pages\n    };\n}\nmodule.exports = paginate;\n",null]}