(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-flag-icon-css', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ngx-flag-icon-css'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,i0,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxFlagIconCssService = (function () {
        function NgxFlagIconCssService() {
        }
        NgxFlagIconCssService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] },
        ];
        /** @nocollapse */
        NgxFlagIconCssService.ctorParameters = function () { return []; };
        /** @nocollapse */ NgxFlagIconCssService.ngInjectableDef = i0.defineInjectable({ factory: function NgxFlagIconCssService_Factory() { return new NgxFlagIconCssService(); }, token: NgxFlagIconCssService, providedIn: "root" });
        return NgxFlagIconCssService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxFlagIconCssComponent = (function () {
        function NgxFlagIconCssComponent() {
        }
        /**
         * @return {?}
         */
        NgxFlagIconCssComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.squared = (this.squared != undefined);
            };
        /**
         * @return {?}
         */
        NgxFlagIconCssComponent.prototype.addingFlagClasses = /**
         * @return {?}
         */
            function () {
                return "flag-icon flag-icon-" + this.country + " " + (this.squared ? 'flag-icon-squared' : '');
            };
        NgxFlagIconCssComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'flag-icon',
                        template: "\n    <span [ngClass]=\"addingFlagClasses()\"></span>\n  ",
                        styles: []
                    },] },
        ];
        /** @nocollapse */
        NgxFlagIconCssComponent.ctorParameters = function () { return []; };
        NgxFlagIconCssComponent.propDecorators = {
            country: [{ type: i0.Input }],
            squared: [{ type: i0.Input }]
        };
        return NgxFlagIconCssComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgxFlagIconCssModule = (function () {
        function NgxFlagIconCssModule() {
        }
        NgxFlagIconCssModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [NgxFlagIconCssComponent],
                        exports: [NgxFlagIconCssComponent]
                    },] },
        ];
        return NgxFlagIconCssModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgxFlagIconCssService = NgxFlagIconCssService;
    exports.NgxFlagIconCssComponent = NgxFlagIconCssComponent;
    exports.NgxFlagIconCssModule = NgxFlagIconCssModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZsYWctaWNvbi1jc3MudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtZmxhZy1pY29uLWNzcy9saWIvbmd4LWZsYWctaWNvbi1jc3Muc2VydmljZS50cyIsIm5nOi8vbmd4LWZsYWctaWNvbi1jc3MvbGliL25neC1mbGFnLWljb24tY3NzLmNvbXBvbmVudC50cyIsIm5nOi8vbmd4LWZsYWctaWNvbi1jc3MvbGliL25neC1mbGFnLWljb24tY3NzLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neEZsYWdJY29uQ3NzU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmbGFnLWljb24nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxzcGFuIFtuZ0NsYXNzXT1cImFkZGluZ0ZsYWdDbGFzc2VzKClcIj48L3NwYW4+XG4gIGAsXG4gIHN0eWxlczogW11cbn0pXG5leHBvcnQgY2xhc3MgTmd4RmxhZ0ljb25Dc3NDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHByaXZhdGUgY291bnRyeTogc3RyaW5nXG4gIEBJbnB1dCgpIHByaXZhdGUgc3F1YXJlZDogYm9vbGVhblxuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnNxdWFyZWQgPSAodGhpcy5zcXVhcmVkICE9IHVuZGVmaW5lZClcbiAgfVxuXG4gIGFkZGluZ0ZsYWdDbGFzc2VzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBmbGFnLWljb24gZmxhZy1pY29uLSR7dGhpcy5jb3VudHJ5fSAke3RoaXMuc3F1YXJlZD8nZmxhZy1pY29uLXNxdWFyZWQnOicnfWBcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xuaW1wb3J0IHsgTmd4RmxhZ0ljb25Dc3NDb21wb25lbnQgfSBmcm9tICcuL25neC1mbGFnLWljb24tY3NzLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbTmd4RmxhZ0ljb25Dc3NDb21wb25lbnRdLFxuICBleHBvcnRzOiBbTmd4RmxhZ0ljb25Dc3NDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIE5neEZsYWdJY29uQ3NzTW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbIkluamVjdGFibGUiLCJDb21wb25lbnQiLCJJbnB1dCIsIk5nTW9kdWxlIiwiQ29tbW9uTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7UUFPRTtTQUFpQjs7b0JBTGxCQSxhQUFVLFNBQUM7d0JBQ1YsVUFBVSxFQUFFLE1BQU07cUJBQ25COzs7OztvQ0FKRDs7Ozs7OztBQ0FBO1FBY0U7U0FBZ0I7Ozs7UUFFaEIsMENBQVE7OztZQUFSO2dCQUNFLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxTQUFTLENBQUMsQ0FBQTthQUMzQzs7OztRQUVELG1EQUFpQjs7O1lBQWpCO2dCQUNFLE9BQU8seUJBQXVCLElBQUksQ0FBQyxPQUFPLFVBQUksSUFBSSxDQUFDLE9BQU8sR0FBQyxtQkFBbUIsR0FBQyxFQUFFLENBQUUsQ0FBQTthQUNwRjs7b0JBcEJGQyxZQUFTLFNBQUM7d0JBQ1QsUUFBUSxFQUFFLFdBQVc7d0JBQ3JCLFFBQVEsRUFBRSwyREFFVDt3QkFDRCxNQUFNLEVBQUUsRUFBRTtxQkFDWDs7Ozs7OEJBR0VDLFFBQUs7OEJBQ0xBLFFBQUs7O3NDQVpSOzs7Ozs7O0FDQUE7Ozs7b0JBSUNDLFdBQVEsU0FBQzt3QkFDUixPQUFPLEVBQUU7NEJBQ1BDLG1CQUFZO3lCQUNiO3dCQUNELFlBQVksRUFBRSxDQUFDLHVCQUF1QixDQUFDO3dCQUN2QyxPQUFPLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQztxQkFDbkM7O21DQVZEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9