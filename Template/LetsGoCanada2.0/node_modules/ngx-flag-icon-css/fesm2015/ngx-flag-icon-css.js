import { Injectable, Component, Input, NgModule, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxFlagIconCssService {
    constructor() { }
}
NgxFlagIconCssService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
NgxFlagIconCssService.ctorParameters = () => [];
/** @nocollapse */ NgxFlagIconCssService.ngInjectableDef = defineInjectable({ factory: function NgxFlagIconCssService_Factory() { return new NgxFlagIconCssService(); }, token: NgxFlagIconCssService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxFlagIconCssComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.squared = (this.squared != undefined);
    }
    /**
     * @return {?}
     */
    addingFlagClasses() {
        return `flag-icon flag-icon-${this.country} ${this.squared ? 'flag-icon-squared' : ''}`;
    }
}
NgxFlagIconCssComponent.decorators = [
    { type: Component, args: [{
                selector: 'flag-icon',
                template: `
    <span [ngClass]="addingFlagClasses()"></span>
  `,
                styles: []
            },] },
];
/** @nocollapse */
NgxFlagIconCssComponent.ctorParameters = () => [];
NgxFlagIconCssComponent.propDecorators = {
    country: [{ type: Input }],
    squared: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgxFlagIconCssModule {
}
NgxFlagIconCssModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [NgxFlagIconCssComponent],
                exports: [NgxFlagIconCssComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxFlagIconCssService, NgxFlagIconCssComponent, NgxFlagIconCssModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZsYWctaWNvbi1jc3MuanMubWFwIiwic291cmNlcyI6WyJuZzovL25neC1mbGFnLWljb24tY3NzL2xpYi9uZ3gtZmxhZy1pY29uLWNzcy5zZXJ2aWNlLnRzIiwibmc6Ly9uZ3gtZmxhZy1pY29uLWNzcy9saWIvbmd4LWZsYWctaWNvbi1jc3MuY29tcG9uZW50LnRzIiwibmc6Ly9uZ3gtZmxhZy1pY29uLWNzcy9saWIvbmd4LWZsYWctaWNvbi1jc3MubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4RmxhZ0ljb25Dc3NTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZsYWctaWNvbicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHNwYW4gW25nQ2xhc3NdPVwiYWRkaW5nRmxhZ0NsYXNzZXMoKVwiPjwvc3Bhbj5cbiAgYCxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hGbGFnSWNvbkNzc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCkgcHJpdmF0ZSBjb3VudHJ5OiBzdHJpbmdcbiAgQElucHV0KCkgcHJpdmF0ZSBzcXVhcmVkOiBib29sZWFuXG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc3F1YXJlZCA9ICh0aGlzLnNxdWFyZWQgIT0gdW5kZWZpbmVkKVxuICB9XG5cbiAgYWRkaW5nRmxhZ0NsYXNzZXMoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGZsYWctaWNvbiBmbGFnLWljb24tJHt0aGlzLmNvdW50cnl9ICR7dGhpcy5zcXVhcmVkPydmbGFnLWljb24tc3F1YXJlZCc6Jyd9YFxuICB9XG5cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBOZ3hGbGFnSWNvbkNzc0NvbXBvbmVudCB9IGZyb20gJy4vbmd4LWZsYWctaWNvbi1jc3MuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ3hGbGFnSWNvbkNzc0NvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtOZ3hGbGFnSWNvbkNzc0NvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTmd4RmxhZ0ljb25Dc3NNb2R1bGUgeyB9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0lBT0UsaUJBQWlCOzs7WUFMbEIsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7Ozs7Ozs7O0FDSkQ7SUFjRSxpQkFBZ0I7Ozs7SUFFaEIsUUFBUTtRQUNOLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxTQUFTLENBQUMsQ0FBQTtLQUMzQzs7OztJQUVELGlCQUFpQjtRQUNmLE9BQU8sdUJBQXVCLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sR0FBQyxtQkFBbUIsR0FBQyxFQUFFLEVBQUUsQ0FBQTtLQUNwRjs7O1lBcEJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsV0FBVztnQkFDckIsUUFBUSxFQUFFOztHQUVUO2dCQUNELE1BQU0sRUFBRSxFQUFFO2FBQ1g7Ozs7O3NCQUdFLEtBQUs7c0JBQ0wsS0FBSzs7Ozs7OztBQ1pSOzs7WUFJQyxRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLFlBQVk7aUJBQ2I7Z0JBQ0QsWUFBWSxFQUFFLENBQUMsdUJBQXVCLENBQUM7Z0JBQ3ZDLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDO2FBQ25DOzs7Ozs7Ozs7Ozs7Ozs7In0=